[{"categories":null,"contents":"go-zero English | 简体中文\nNote: To meet the requirements of Open Source Foundation, we moved go-zero from tal-tech to zeromicro (a neutral GitHub organization).\n0. what is go-zero go-zero (listed in CNCF Landscape: https://landscape.cncf.io/?selected=go-zero) is a web and rpc framework with lots of builtin engineering practices. It’s born to ensure the stability of the busy services with resilience design, and has been serving sites with tens of millions users for years.\ngo-zero contains simple API description syntax and code generation tool called goctl. You can generate Go, iOS, Android, Kotlin, Dart, TypeScript, JavaScript from .api files with goctl.\nAdvantages of go-zero:\n improve the stability of the services with tens of millions of daily active users builtin chained timeout control, concurrency control, rate limit, adaptive circuit breaker, adaptive load shedding, even no configuration needed builtin middlewares also can be integrated into your frameworks simple API syntax, one command to generate couple of different languages auto validate the request parameters from clients plenty of builtin microservice management and concurrent toolkits  1. Backgrounds of go-zero At the beginning of 2018, we decided to re-design our system, from monolithic architecture with Java+MongoDB to microservice architecture. After researches and comparison, we chose to:\n Golang based  great performance simple syntax proven engineering efficiency extreme deployment experience less server resource consumption   Self-designed microservice architecture  I have rich experience on designing microservice architectures easy to location the problems easy to extend the features    2. Design considerations on go-zero By designing the microservice architecture, we expected to ensure the stability, as well as the productivity. And from just the beginning, we have the following design principles:\n keep it simple high availability stable on high concurrency easy to extend resilience design, failure-oriented programming try best to be friendly to the business logic development, encapsulate the complexity one thing, one way  After almost half a year, we finished the transfer from monolithic system to microservice system, and deployed on August 2018. The new system guaranteed the business growth, and the system stability.\n3. The implementation and features of go-zero go-zero is a web and rpc framework that integrates lots of engineering practices. The features are mainly listed below:\n powerful tool included, less code to write simple interfaces fully compatible with net/http middlewares are supported, easy to extend high performance failure-oriented programming, resilience design builtin service discovery, load balancing builtin concurrency control, adaptive circuit breaker, adaptive load shedding, auto trigger, auto recover auto validation of API request parameters chained timeout control auto management of data caching call tracing, metrics and monitoring high concurrency protected  As below, go-zero protects the system with couple layers and mechanisms:\n4. Future development plans of go-zero  auto generate API mock server, make the client debugging easier auto generate the simple integration test for the server side just from the .api files  5. Installation Run the following command under your project:\ngo get -u github.com/tal-tech/go-zero 6. Quick Start  full examples can be checked out from below:\nRapid development of microservice systems\nRapid development of microservice systems - multiple RPCs\n  install goctl\ngoctlcan be read as go control. goctl means not to be controlled by code, instead, we control it. The inside go is not golang. At the very beginning, I was expecting it to help us improve the productivity, and make our lives easier.\n# for Go 1.15 and earlier GO111MODULE=on go get -u github.com/tal-tech/go-zero/tools/goctl@cli # for Go 1.16 and later go install github.com/tal-tech/go-zero/tools/goctl@cli make sure goctl is executable.\n  create the API file, like greet.api, you can install the plugin of goctl in vs code, api syntax is supported.\ntype ( Request { Name string `path:\u0026#34;name,options=you|me\u0026#34;` // parameters are auto validated  } Response { Message string `json:\u0026#34;message\u0026#34;` } ) service greet-api { @handler GreetHandler get /greet/from/:name(Request) returns (Response) } the .api files also can be generate by goctl, like below:\ngoctl api -o greet.api   generate the go server side code\ngoctl api go -api greet.api -dir greet the generated files look like:\n├── greet │ ├── etc │ │ └── greet-api.yaml // configuration file │ ├── greet.go // main file │ └── internal │ ├── config │ │ └── config.go // configuration definition │ ├── handler │ │ ├── greethandler.go // get/put/post/delete routes are defined here │ │ └── routes.go // routes list │ ├── logic │ │ └── greetlogic.go // request logic can be written here │ ├── svc │ │ └── servicecontext.go // service context, mysql/redis can be passed in here │ └── types │ └── types.go // request/response defined here └── greet.api // api description file the generated code can be run directly:\ncd greet go mod init go mod tidy go run greet.go -f etc/greet-api.yaml by default, it’s listening on port 8888, while it can be changed in configuration file.\nyou can check it by curl:\ncurl -i http://localhost:8888/greet/from/you the response looks like:\nHTTP/1.1 200 OK Date: Sun, 30 Aug 2020 15:32:35 GMT Content-Length: 0   Write the business logic code\n the dependencies can be passed into the logic within servicecontext.go, like mysql, reds etc. add the logic code in logic package according to .api file    Generate code like Java, TypeScript, Dart, JavaScript etc. just from the api file\ngoctl api java -api greet.api -dir greet goctl api dart -api greet.api -dir greet ...   7. Benchmark Checkout the test code\n8. Documents (adding)  Documents Rapid development of microservice systems Rapid development of microservice systems - multiple RPCs Examples  Give a Star! ⭐ If you like or are using this project to learn or start your solution, please give it a star. Thanks!\n","link":"/freemind.site/posts/go-zero/","tags":["Go","Zero"],"title":"Go Zero"},{"categories":["引擎","engine"],"contents":"What is TDengine？ TDengine is an open-sourced big data platform under GNU AGPL v3.0, designed and optimized for the Internet of Things (IoT), Connected Cars, Industrial IoT, and IT Infrastructure and Application Monitoring. Besides the 10x faster time-series database, it provides caching, stream computing, message queuing and other functionalities to reduce the complexity and cost of development and operation.\n  10x Faster on Insert/Query Speeds: Through the innovative design on storage, on a single-core machine, over 20K requests can be processed, millions of data points can be ingested, and over 10 million data points can be retrieved in a second. It is 10 times faster than other databases.\n  1/5 Hardware/Cloud Service Costs: Compared with typical big data solutions, less than 1/5 of computing resources are required. Via column-based storage and tuned compression algorithms for different data types, less than 1/10 of storage space is needed.\n  Full Stack for Time-Series Data: By integrating a database with message queuing, caching, and stream computing features together, it is no longer necessary to integrate Kafka/Redis/HBase/Spark or other software. It makes the system architecture much simpler and more robust.\n  Powerful Data Analysis: Whether it is 10 years or one minute ago, data can be queried just by specifying the time range. Data can be aggregated over time, multiple time streams or both. Ad Hoc queries or analyses can be executed via TDengine shell, Python, R or Matlab.\n  Seamless Integration with Other Tools: Telegraf, Grafana, Matlab, R, and other tools can be integrated with TDengine without a line of code. MQTT, OPC, Hadoop, Spark, and many others will be integrated soon.\n  Zero Management, No Learning Curve: It takes only seconds to download, install, and run it successfully; there are no other dependencies. Automatic partitioning on tables or DBs. Standard SQL is used, with C/C++, Python, JDBC, Go and RESTful connectors.\n  ","link":"/freemind.site/posts/tdengine/","tags":null,"title":"Tdengine"}]